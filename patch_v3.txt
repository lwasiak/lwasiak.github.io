diff --git a/Source/WebCore/html/canvas/WebGLRenderingContext.cpp b/Source/WebCore/html/canvas/WebGLRenderingContext.cpp
index aed8f0f..138cd7c 100644
--- a/Source/WebCore/html/canvas/WebGLRenderingContext.cpp
+++ b/Source/WebCore/html/canvas/WebGLRenderingContext.cpp
@@ -80,12 +80,41 @@
 #include <wtf/Uint32Array.h>
 #include <wtf/text/CString.h>
 #include <wtf/text/StringBuilder.h>
-
+#include <wtf/CurrentTime.h>
 #if PLATFORM(QT)
 #undef emit
 #endif
-
+#include <map>
 namespace WebCore {
+static double totalWGLRCTXtime = 0;
+static double prev_totalWGLRCTXtime = 0;
+static int level_logger = 0;
+static unsigned FuncCount = 0;
+static unsigned FuncCount2 = 0;
+
+class Logger
+{
+public: 
+    Logger()
+    {
+        timeorig =  currentTime();
+        level_logger++;
+    }
+
+    ~Logger()
+    {
+        level_logger--;
+        FuncCount++;
+        if (!level_logger)
+        {
+            FuncCount2++;
+            totalWGLRCTXtime += currentTime() - timeorig;
+        }
+    }
+    double timeorig;
+};
+
+#define LOG() Logger aafsdafsdafsdafsdafsdafsdafsd;
 
 const double secondsBetweenRestoreAttempts = 1.0;
 const int maxGLErrorsAllowedToConsole = 256;
@@ -97,14 +126,14 @@ namespace {
         ScopedDrawingBufferBinder(DrawingBuffer* drawingBuffer, WebGLFramebuffer* framebufferBinding)
             : m_drawingBuffer(drawingBuffer)
             , m_framebufferBinding(framebufferBinding)
-        {
+        {LOG();
             // Commit DrawingBuffer if needed (e.g., for multisampling)
             if (!m_framebufferBinding && m_drawingBuffer)
                 m_drawingBuffer->commit();
         }
 
         ~ScopedDrawingBufferBinder()
-        {
+        {LOG();
             // Restore DrawingBuffer if needed
             if (!m_framebufferBinding && m_drawingBuffer)
                 m_drawingBuffer->bind();
@@ -116,12 +145,12 @@ namespace {
     };
 
     Platform3DObject objectOrZero(WebGLObject* object)
-    {
+    {LOG();
         return object ? object->object() : 0;
     }
 
     void clip1D(GC3Dint start, GC3Dsizei range, GC3Dsizei sourceRange, GC3Dint* clippedStart, GC3Dsizei* clippedRange)
-    {
+    {LOG();
         ASSERT(clippedStart && clippedRange);
         if (start < 0) {
             range += start;
@@ -138,7 +167,7 @@ namespace {
     bool clip2D(GC3Dint x, GC3Dint y, GC3Dsizei width, GC3Dsizei height,
                 GC3Dsizei sourceWidth, GC3Dsizei sourceHeight,
                 GC3Dint* clippedX, GC3Dint* clippedY, GC3Dsizei* clippedWidth, GC3Dsizei*clippedHeight)
-    {
+    {LOG();
         ASSERT(clippedX && clippedY && clippedWidth && clippedHeight);
         clip1D(x, width, sourceWidth, clippedX, clippedWidth);
         clip1D(y, height, sourceHeight, clippedY, clippedHeight);
@@ -146,7 +175,7 @@ namespace {
     }
 
     GC3Dint clamp(GC3Dint value, GC3Dint min, GC3Dint max)
-    {
+    {LOG();
         if (value < min)
             value = min;
         if (value > max)
@@ -157,7 +186,7 @@ namespace {
     // Return true if a character belongs to the ASCII subset as defined in
     // GLSL ES 1.0 spec section 3.1.
     bool validateCharacter(unsigned char c)
-    {
+    {LOG();
         // Printing characters are valid except " $ ` @ \ ' DEL.
         if (c >= 32 && c <= 126
             && c != '"' && c != '$' && c != '`' && c != '@' && c != '\\' && c != '\'')
@@ -170,7 +199,7 @@ namespace {
     }
 
     bool isPrefixReserved(const String& name)
-    {
+    {LOG();
         if (name.startsWith("gl_") || name.startsWith("webgl_") || name.startsWith("_webgl_"))
             return true;
         return false;
@@ -186,12 +215,12 @@ namespace {
             , m_sourceString(str)
             , m_length(str.length())
             , m_position(0)
-        {
+        {LOG();
             parse();
         }
 
         String result()
-        {
+        {LOG();
             return m_builder.toString();
         }
 
@@ -367,11 +396,11 @@ public:
                        bool changed)
         : m_context(context)
         , m_changed(changed)
-    {
+    {LOG();
     }
 
     ~WebGLStateRestorer()
-    {
+    {LOG();
         m_context->cleanupAfterGraphicsCall(m_changed);
     }
 
@@ -404,8 +433,15 @@ private:
     WebGLRenderingContext* m_context;
 };
 
-PassOwnPtr<WebGLRenderingContext> WebGLRenderingContext::create(HTMLCanvasElement* canvas, WebGLContextAttributes* attrs)
+void OnKill(int sigNum)
 {
+    printf( "singal: %d...\n", sigNum );
+    fflush(stdout);
+    exit( sigNum );
+}
+
+PassOwnPtr<WebGLRenderingContext> WebGLRenderingContext::create(HTMLCanvasElement* canvas, WebGLContextAttributes* attrs)
+{LOG();
     Document* document = canvas->document();
     Frame* frame = document->frame();
     if (!frame)
@@ -446,6 +482,14 @@ PassOwnPtr<WebGLRenderingContext> WebGLRenderingContext::create(HTMLCanvasElemen
     OwnPtr<WebGLRenderingContext> renderingContext = adoptPtr(new WebGLRenderingContext(canvas, context, attributes));
     renderingContext->suspendIfNeeded();
 
+    struct sigaction sigIntHandler;
+
+    sigIntHandler.sa_handler = OnKill;
+    sigemptyset(&sigIntHandler.sa_mask);
+    sigIntHandler.sa_flags = 0;
+    sigaction(SIGINT, &sigIntHandler, NULL);
+    signal(SIGINT, OnKill);
+
     return renderingContext.release();
 }
 
@@ -464,7 +508,7 @@ WebGLRenderingContext::WebGLRenderingContext(HTMLCanvasElement* passedCanvas, Pa
     , m_attributes(attributes)
     , m_synthesizedErrorsToConsole(true)
     , m_numGLErrorsToConsoleAllowed(maxGLErrorsAllowedToConsole)
-{
+{LOG();
     ASSERT(m_context);
     m_contextGroup = WebGLContextGroup::create();
     m_contextGroup->addContext(this);
@@ -480,7 +524,7 @@ WebGLRenderingContext::WebGLRenderingContext(HTMLCanvasElement* passedCanvas, Pa
 }
 
 void WebGLRenderingContext::initializeNewContext()
-{
+{LOG();
     ASSERT(!m_contextLost);
     m_needsUpdate = true;
     m_markedCanvasDirty = false;
@@ -561,7 +605,7 @@ void WebGLRenderingContext::initializeNewContext()
 }
 
 void WebGLRenderingContext::setupFlags()
-{
+{LOG();
     ASSERT(m_context);
 
     Page* p = canvas()->document()->page();
@@ -582,7 +626,7 @@ void WebGLRenderingContext::setupFlags()
 }
 
 bool WebGLRenderingContext::allowPrivilegedExtensions() const
-{
+{LOG();
     Page* p = canvas()->document()->page();
     if (p && p->settings())
         return p->settings()->privilegedWebGLExtensionsEnabled();
@@ -590,7 +634,7 @@ bool WebGLRenderingContext::allowPrivilegedExtensions() const
 }
 
 void WebGLRenderingContext::addCompressedTextureFormat(GC3Denum format)
-{
+{LOG();
     if (!m_compressedTextureFormats.contains(format))
         m_compressedTextureFormats.append(format);
 }
@@ -621,7 +665,7 @@ WebGLRenderingContext::~WebGLRenderingContext()
 }
 
 void WebGLRenderingContext::destroyGraphicsContext3D()
-{
+{LOG();
     // The drawing buffer holds a context reference. It must also be destroyed
     // in order for the context to be released.
     if (m_drawingBuffer)
@@ -635,7 +679,7 @@ void WebGLRenderingContext::destroyGraphicsContext3D()
 }
 
 void WebGLRenderingContext::markContextChanged()
-{
+{LOG();
     if (m_framebufferBinding)
         return;
 
@@ -663,7 +707,7 @@ void WebGLRenderingContext::markContextChanged()
 }
 
 bool WebGLRenderingContext::clearIfComposited(GC3Dbitfield mask)
-{
+{LOG();
     if (isContextLost()) 
         return false;
 
@@ -717,7 +761,7 @@ bool WebGLRenderingContext::clearIfComposited(GC3Dbitfield mask)
 }
 
 void WebGLRenderingContext::restoreStateAfterClear()
-{
+{LOG();
     // Restore the state that the context set.
     if (m_scissorEnabled)
         m_context->enable(GraphicsContext3D::SCISSOR_TEST);
@@ -732,12 +776,12 @@ void WebGLRenderingContext::restoreStateAfterClear()
 }
 
 void WebGLRenderingContext::markLayerComposited()
-{
+{LOG();
     m_context->markLayerComposited();
 }
 
 void WebGLRenderingContext::paintRenderingResultsToCanvas()
-{
+{LOG();
     if (canvas()->document()->printing())
         canvas()->clearPresentationCopy();
 
@@ -770,7 +814,7 @@ void WebGLRenderingContext::paintRenderingResultsToCanvas()
 }
 
 PassRefPtr<ImageData> WebGLRenderingContext::paintRenderingResultsToImageData()
-{
+{LOG();
     clearIfComposited();
     if (m_drawingBuffer)
         m_drawingBuffer->commit();
@@ -787,7 +831,7 @@ PassRefPtr<ImageData> WebGLRenderingContext::paintRenderingResultsToImageData()
 }
 
 void WebGLRenderingContext::reshape(int width, int height)
-{
+{LOG();
     // This is an approximation because at WebGLRenderingContext level we don't
     // know if the underlying FBO uses textures or renderbuffers.
     GC3Dint maxSize = std::min(m_maxTextureSize, m_maxRenderbufferSize);
@@ -823,7 +867,7 @@ void WebGLRenderingContext::reshape(int width, int height)
 }
 
 int WebGLRenderingContext::drawingBufferWidth() const
-{
+{LOG();
     if (m_drawingBuffer)
         return m_drawingBuffer->size().width();
 
@@ -831,7 +875,7 @@ int WebGLRenderingContext::drawingBufferWidth() const
 }
 
 int WebGLRenderingContext::drawingBufferHeight() const
-{
+{LOG();
     if (m_drawingBuffer)
         return m_drawingBuffer->size().height();
 
@@ -839,7 +883,7 @@ int WebGLRenderingContext::drawingBufferHeight() const
 }
 
 unsigned int WebGLRenderingContext::sizeInBytes(GC3Denum type)
-{
+{LOG();
     switch (type) {
     case GraphicsContext3D::BYTE:
         return sizeof(GC3Dbyte);
@@ -861,7 +905,7 @@ unsigned int WebGLRenderingContext::sizeInBytes(GC3Denum type)
 }
 
 void WebGLRenderingContext::activeTexture(GC3Denum texture, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return;
@@ -879,7 +923,7 @@ void WebGLRenderingContext::activeTexture(GC3Denum texture, ExceptionCode& ec)
 }
 
 void WebGLRenderingContext::attachShader(WebGLProgram* program, WebGLShader* shader, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("attachShader", program) || !validateWebGLObject("attachShader", shader))
         return;
@@ -893,7 +937,7 @@ void WebGLRenderingContext::attachShader(WebGLProgram* program, WebGLShader* sha
 }
 
 void WebGLRenderingContext::bindAttribLocation(WebGLProgram* program, GC3Duint index, const String& name, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("bindAttribLocation", program))
         return;
@@ -914,7 +958,7 @@ void WebGLRenderingContext::bindAttribLocation(WebGLProgram* program, GC3Duint i
 }
 
 bool WebGLRenderingContext::checkObjectToBeBound(const char* functionName, WebGLObject* object, bool& deleted)
-{
+{LOG();
     deleted = false;
     if (isContextLost())
         return false;
@@ -929,7 +973,7 @@ bool WebGLRenderingContext::checkObjectToBeBound(const char* functionName, WebGL
 }
 
 void WebGLRenderingContext::bindBuffer(GC3Denum target, WebGLBuffer* buffer, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     bool deleted;
     if (!checkObjectToBeBound("bindBuffer", buffer, deleted))
@@ -956,7 +1000,7 @@ void WebGLRenderingContext::bindBuffer(GC3Denum target, WebGLBuffer* buffer, Exc
 }
 
 void WebGLRenderingContext::bindFramebuffer(GC3Denum target, WebGLFramebuffer* buffer, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     bool deleted;
     if (!checkObjectToBeBound("bindFramebuffer", buffer, deleted))
@@ -982,7 +1026,7 @@ void WebGLRenderingContext::bindFramebuffer(GC3Denum target, WebGLFramebuffer* b
 }
 
 void WebGLRenderingContext::bindRenderbuffer(GC3Denum target, WebGLRenderbuffer* renderBuffer, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     bool deleted;
     if (!checkObjectToBeBound("bindRenderbuffer", renderBuffer, deleted))
@@ -1001,7 +1045,7 @@ void WebGLRenderingContext::bindRenderbuffer(GC3Denum target, WebGLRenderbuffer*
 }
 
 void WebGLRenderingContext::bindTexture(GC3Denum target, WebGLTexture* texture, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     bool deleted;
     if (!checkObjectToBeBound("bindTexture", texture, deleted))
@@ -1044,7 +1088,7 @@ void WebGLRenderingContext::bindTexture(GC3Denum target, WebGLTexture* texture,
 }
 
 void WebGLRenderingContext::blendColor(GC3Dfloat red, GC3Dfloat green, GC3Dfloat blue, GC3Dfloat alpha)
-{
+{LOG();
     if (isContextLost())
         return;
     m_context->blendColor(red, green, blue, alpha);
@@ -1052,7 +1096,7 @@ void WebGLRenderingContext::blendColor(GC3Dfloat red, GC3Dfloat green, GC3Dfloat
 }
 
 void WebGLRenderingContext::blendEquation(GC3Denum mode)
-{
+{LOG();
     if (isContextLost() || !validateBlendEquation("blendEquation", mode))
         return;
     m_context->blendEquation(mode);
@@ -1060,7 +1104,7 @@ void WebGLRenderingContext::blendEquation(GC3Denum mode)
 }
 
 void WebGLRenderingContext::blendEquationSeparate(GC3Denum modeRGB, GC3Denum modeAlpha)
-{
+{LOG();
     if (isContextLost() || !validateBlendEquation("blendEquation", modeRGB) || !validateBlendEquation("blendEquation", modeAlpha))
         return;
     m_context->blendEquationSeparate(modeRGB, modeAlpha);
@@ -1069,7 +1113,7 @@ void WebGLRenderingContext::blendEquationSeparate(GC3Denum modeRGB, GC3Denum mod
 
 
 void WebGLRenderingContext::blendFunc(GC3Denum sfactor, GC3Denum dfactor)
-{
+{LOG();
     if (isContextLost() || !validateBlendFuncFactors("blendFunc", sfactor, dfactor))
         return;
     m_context->blendFunc(sfactor, dfactor);
@@ -1077,7 +1121,7 @@ void WebGLRenderingContext::blendFunc(GC3Denum sfactor, GC3Denum dfactor)
 }
 
 void WebGLRenderingContext::blendFuncSeparate(GC3Denum srcRGB, GC3Denum dstRGB, GC3Denum srcAlpha, GC3Denum dstAlpha)
-{
+{LOG();
     // Note: Alpha does not have the same restrictions as RGB.
     if (isContextLost() || !validateBlendFuncFactors("blendFunc", srcRGB, dstRGB))
         return;
@@ -1086,7 +1130,7 @@ void WebGLRenderingContext::blendFuncSeparate(GC3Denum srcRGB, GC3Denum dstRGB,
 }
 
 void WebGLRenderingContext::bufferData(GC3Denum target, long long size, GC3Denum usage, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return;
@@ -1113,7 +1157,7 @@ void WebGLRenderingContext::bufferData(GC3Denum target, long long size, GC3Denum
 }
 
 void WebGLRenderingContext::bufferData(GC3Denum target, ArrayBuffer* data, GC3Denum usage, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return;
@@ -1136,7 +1180,7 @@ void WebGLRenderingContext::bufferData(GC3Denum target, ArrayBuffer* data, GC3De
 }
 
 void WebGLRenderingContext::bufferData(GC3Denum target, ArrayBufferView* data, GC3Denum usage, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return;
@@ -1159,7 +1203,7 @@ void WebGLRenderingContext::bufferData(GC3Denum target, ArrayBufferView* data, G
 }
 
 void WebGLRenderingContext::bufferSubData(GC3Denum target, long long offset, ArrayBuffer* data, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return;
@@ -1184,7 +1228,7 @@ void WebGLRenderingContext::bufferSubData(GC3Denum target, long long offset, Arr
 }
 
 void WebGLRenderingContext::bufferSubData(GC3Denum target, long long offset, ArrayBufferView* data, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return;
@@ -1209,7 +1253,7 @@ void WebGLRenderingContext::bufferSubData(GC3Denum target, long long offset, Arr
 }
 
 GC3Denum WebGLRenderingContext::checkFramebufferStatus(GC3Denum target)
-{
+{LOG();
     if (isContextLost())
         return GraphicsContext3D::FRAMEBUFFER_UNSUPPORTED;
     if (target != GraphicsContext3D::FRAMEBUFFER) {
@@ -1230,7 +1274,7 @@ GC3Denum WebGLRenderingContext::checkFramebufferStatus(GC3Denum target)
 }
 
 void WebGLRenderingContext::clear(GC3Dbitfield mask)
-{
+{LOG();
     if (isContextLost())
         return;
     if (mask & ~(GraphicsContext3D::COLOR_BUFFER_BIT | GraphicsContext3D::DEPTH_BUFFER_BIT | GraphicsContext3D::STENCIL_BUFFER_BIT)) {
@@ -1248,7 +1292,7 @@ void WebGLRenderingContext::clear(GC3Dbitfield mask)
 }
 
 void WebGLRenderingContext::clearColor(GC3Dfloat r, GC3Dfloat g, GC3Dfloat b, GC3Dfloat a)
-{
+{LOG();
     if (isContextLost())
         return;
     if (std::isnan(r))
@@ -1268,7 +1312,7 @@ void WebGLRenderingContext::clearColor(GC3Dfloat r, GC3Dfloat g, GC3Dfloat b, GC
 }
 
 void WebGLRenderingContext::clearDepth(GC3Dfloat depth)
-{
+{LOG();
     if (isContextLost())
         return;
     m_clearDepth = depth;
@@ -1277,7 +1321,7 @@ void WebGLRenderingContext::clearDepth(GC3Dfloat depth)
 }
 
 void WebGLRenderingContext::clearStencil(GC3Dint s)
-{
+{LOG();
     if (isContextLost())
         return;
     m_clearStencil = s;
@@ -1286,7 +1330,7 @@ void WebGLRenderingContext::clearStencil(GC3Dint s)
 }
 
 void WebGLRenderingContext::colorMask(GC3Dboolean red, GC3Dboolean green, GC3Dboolean blue, GC3Dboolean alpha)
-{
+{LOG();
     if (isContextLost())
         return;
     m_colorMask[0] = red;
@@ -1298,7 +1342,7 @@ void WebGLRenderingContext::colorMask(GC3Dboolean red, GC3Dboolean green, GC3Dbo
 }
 
 void WebGLRenderingContext::compileShader(WebGLShader* shader, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("compileShader", shader))
         return;
@@ -1308,7 +1352,7 @@ void WebGLRenderingContext::compileShader(WebGLShader* shader, ExceptionCode& ec
 
 void WebGLRenderingContext::compressedTexImage2D(GC3Denum target, GC3Dint level, GC3Denum internalformat, GC3Dsizei width,
                                                  GC3Dsizei height, GC3Dint border, ArrayBufferView* data)
-{
+{LOG();
     if (isContextLost())
         return;
     if (!validateTexFuncLevel("compressedTexImage2D", target, level))
@@ -1344,7 +1388,7 @@ void WebGLRenderingContext::compressedTexImage2D(GC3Denum target, GC3Dint level,
 
 void WebGLRenderingContext::compressedTexSubImage2D(GC3Denum target, GC3Dint level, GC3Dint xoffset, GC3Dint yoffset,
                                                     GC3Dsizei width, GC3Dsizei height, GC3Denum format, ArrayBufferView* data)
-{
+{LOG();
     if (isContextLost())
         return;
     if (!validateTexFuncLevel("compressedTexSubImage2D", target, level))
@@ -1374,7 +1418,7 @@ void WebGLRenderingContext::compressedTexSubImage2D(GC3Denum target, GC3Dint lev
 }
 
 bool WebGLRenderingContext::validateSettableTexFormat(const char* functionName, GC3Denum format)
-{
+{LOG();
     if (GraphicsContext3D::getClearBitsByFormat(format) & (GraphicsContext3D::DEPTH_BUFFER_BIT | GraphicsContext3D::STENCIL_BUFFER_BIT)) {
         synthesizeGLError(GraphicsContext3D::INVALID_OPERATION, functionName, "format can not be set, only rendered to");
         return false;
@@ -1383,7 +1427,7 @@ bool WebGLRenderingContext::validateSettableTexFormat(const char* functionName,
 }
 
 void WebGLRenderingContext::copyTexImage2D(GC3Denum target, GC3Dint level, GC3Denum internalformat, GC3Dint x, GC3Dint y, GC3Dsizei width, GC3Dsizei height, GC3Dint border)
-{
+{LOG();
     if (isContextLost())
         return;
     if (!validateTexFuncParameters("copyTexImage2D", NotTexSubImage2D, target, level, internalformat, width, height, border, internalformat, GraphicsContext3D::UNSIGNED_BYTE))
@@ -1430,7 +1474,7 @@ void WebGLRenderingContext::copyTexImage2D(GC3Denum target, GC3Dint level, GC3De
 }
 
 void WebGLRenderingContext::copyTexSubImage2D(GC3Denum target, GC3Dint level, GC3Dint xoffset, GC3Dint yoffset, GC3Dint x, GC3Dint y, GC3Dsizei width, GC3Dsizei height)
-{
+{LOG();
     if (isContextLost())
         return;
     if (!validateTexFuncLevel("copyTexSubImage2D", target, level))
@@ -1501,7 +1545,7 @@ void WebGLRenderingContext::copyTexSubImage2D(GC3Denum target, GC3Dint level, GC
 }
 
 PassRefPtr<WebGLBuffer> WebGLRenderingContext::createBuffer()
-{
+{LOG();
     if (isContextLost())
         return 0;
     RefPtr<WebGLBuffer> o = WebGLBuffer::create(this);
@@ -1510,7 +1554,7 @@ PassRefPtr<WebGLBuffer> WebGLRenderingContext::createBuffer()
 }
 
 PassRefPtr<WebGLFramebuffer> WebGLRenderingContext::createFramebuffer()
-{
+{LOG();
     if (isContextLost())
         return 0;
     RefPtr<WebGLFramebuffer> o = WebGLFramebuffer::create(this);
@@ -1519,7 +1563,7 @@ PassRefPtr<WebGLFramebuffer> WebGLRenderingContext::createFramebuffer()
 }
 
 PassRefPtr<WebGLTexture> WebGLRenderingContext::createTexture()
-{
+{LOG();
     if (isContextLost())
         return 0;
     RefPtr<WebGLTexture> o = WebGLTexture::create(this);
@@ -1528,7 +1572,7 @@ PassRefPtr<WebGLTexture> WebGLRenderingContext::createTexture()
 }
 
 PassRefPtr<WebGLProgram> WebGLRenderingContext::createProgram()
-{
+{LOG();
     if (isContextLost())
         return 0;
     RefPtr<WebGLProgram> o = WebGLProgram::create(this);
@@ -1537,7 +1581,7 @@ PassRefPtr<WebGLProgram> WebGLRenderingContext::createProgram()
 }
 
 PassRefPtr<WebGLRenderbuffer> WebGLRenderingContext::createRenderbuffer()
-{
+{LOG();
     if (isContextLost())
         return 0;
     RefPtr<WebGLRenderbuffer> o = WebGLRenderbuffer::create(this);
@@ -1546,7 +1590,7 @@ PassRefPtr<WebGLRenderbuffer> WebGLRenderingContext::createRenderbuffer()
 }
 
 PassRefPtr<WebGLShader> WebGLRenderingContext::createShader(GC3Denum type, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return 0;
@@ -1561,7 +1605,7 @@ PassRefPtr<WebGLShader> WebGLRenderingContext::createShader(GC3Denum type, Excep
 }
 
 void WebGLRenderingContext::cullFace(GC3Denum mode)
-{
+{LOG();
     if (isContextLost())
         return;
     m_context->cullFace(mode);
@@ -1569,7 +1613,7 @@ void WebGLRenderingContext::cullFace(GC3Denum mode)
 }
 
 bool WebGLRenderingContext::deleteObject(WebGLObject* object)
-{
+{LOG();
     if (isContextLost() || !object)
         return false;
     if (!object->validate(contextGroup(), this)) {
@@ -1584,7 +1628,7 @@ bool WebGLRenderingContext::deleteObject(WebGLObject* object)
 }
 
 void WebGLRenderingContext::deleteBuffer(WebGLBuffer* buffer)
-{
+{LOG();
     if (!deleteObject(buffer))
         return;
     if (m_boundArrayBuffer == buffer)
@@ -1594,7 +1638,7 @@ void WebGLRenderingContext::deleteBuffer(WebGLBuffer* buffer)
 }
 
 void WebGLRenderingContext::deleteFramebuffer(WebGLFramebuffer* framebuffer)
-{
+{LOG();
     if (!deleteObject(framebuffer))
         return;
     if (framebuffer == m_framebufferBinding) {
@@ -1609,14 +1653,14 @@ void WebGLRenderingContext::deleteFramebuffer(WebGLFramebuffer* framebuffer)
 }
 
 void WebGLRenderingContext::deleteProgram(WebGLProgram* program)
-{
+{LOG();
     deleteObject(program);
     // We don't reset m_currentProgram to 0 here because the deletion of the
     // current program is delayed.
 }
 
 void WebGLRenderingContext::deleteRenderbuffer(WebGLRenderbuffer* renderbuffer)
-{
+{LOG();
     if (!deleteObject(renderbuffer))
         return;
     if (renderbuffer == m_renderbufferBinding)
@@ -1626,12 +1670,12 @@ void WebGLRenderingContext::deleteRenderbuffer(WebGLRenderbuffer* renderbuffer)
 }
 
 void WebGLRenderingContext::deleteShader(WebGLShader* shader)
-{
+{LOG();
     deleteObject(shader);
 }
 
 void WebGLRenderingContext::deleteTexture(WebGLTexture* texture)
-{
+{LOG();
     if (!deleteObject(texture))
         return;
     for (size_t i = 0; i < m_textureUnits.size(); ++i) {
@@ -1645,7 +1689,7 @@ void WebGLRenderingContext::deleteTexture(WebGLTexture* texture)
 }
 
 void WebGLRenderingContext::depthFunc(GC3Denum func)
-{
+{LOG();
     if (isContextLost())
         return;
     m_context->depthFunc(func);
@@ -1653,7 +1697,7 @@ void WebGLRenderingContext::depthFunc(GC3Denum func)
 }
 
 void WebGLRenderingContext::depthMask(GC3Dboolean flag)
-{
+{LOG();
     if (isContextLost())
         return;
     m_depthMask = flag;
@@ -1662,7 +1706,7 @@ void WebGLRenderingContext::depthMask(GC3Dboolean flag)
 }
 
 void WebGLRenderingContext::depthRange(GC3Dfloat zNear, GC3Dfloat zFar)
-{
+{LOG();
     if (isContextLost())
         return;
     if (zNear > zFar) {
@@ -1674,7 +1718,7 @@ void WebGLRenderingContext::depthRange(GC3Dfloat zNear, GC3Dfloat zFar)
 }
 
 void WebGLRenderingContext::detachShader(WebGLProgram* program, WebGLShader* shader, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("detachShader", program) || !validateWebGLObject("detachShader", shader))
         return;
@@ -1688,7 +1732,7 @@ void WebGLRenderingContext::detachShader(WebGLProgram* program, WebGLShader* sha
 }
 
 void WebGLRenderingContext::disable(GC3Denum cap)
-{
+{LOG();
     if (isContextLost() || !validateCapability("disable", cap))
         return;
     if (cap == GraphicsContext3D::STENCIL_TEST) {
@@ -1707,7 +1751,7 @@ void WebGLRenderingContext::disable(GC3Denum cap)
 }
 
 void WebGLRenderingContext::disableVertexAttribArray(GC3Duint index, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return;
@@ -1726,7 +1770,7 @@ void WebGLRenderingContext::disableVertexAttribArray(GC3Duint index, ExceptionCo
 }
 
 bool WebGLRenderingContext::validateElementArraySize(GC3Dsizei count, GC3Denum type, GC3Dintptr offset)
-{
+{LOG();
     RefPtr<WebGLBuffer> elementArrayBuffer = m_boundVertexArrayObject->getElementArrayBuffer();
     
     if (!elementArrayBuffer)
@@ -1766,7 +1810,7 @@ bool WebGLRenderingContext::validateElementArraySize(GC3Dsizei count, GC3Denum t
 }
 
 bool WebGLRenderingContext::validateIndexArrayConservative(GC3Denum type, unsigned& numElementsRequired)
-{
+{LOG();
     // Performs conservative validation by caching a maximum index of
     // the given type per element array buffer. If all of the bound
     // array buffers have enough elements to satisfy that maximum
@@ -1828,7 +1872,7 @@ bool WebGLRenderingContext::validateIndexArrayConservative(GC3Denum type, unsign
 }
 
 bool WebGLRenderingContext::validateIndexArrayPrecise(GC3Dsizei count, GC3Denum type, GC3Dintptr offset, unsigned& numElementsRequired)
-{
+{LOG();
     ASSERT(count >= 0 && offset >= 0);
     unsigned lastIndex = 0;
     
@@ -1881,7 +1925,7 @@ bool WebGLRenderingContext::validateIndexArrayPrecise(GC3Dsizei count, GC3Denum
 }
 
 bool WebGLRenderingContext::validateRenderingState(unsigned numElementsRequired)
-{
+{LOG();
     if (!m_currentProgram)
         return false;
 
@@ -1925,7 +1969,7 @@ bool WebGLRenderingContext::validateRenderingState(unsigned numElementsRequired)
 }
 
 bool WebGLRenderingContext::validateWebGLObject(const char* functionName, WebGLObject* object)
-{
+{LOG();
     if (!object || !object->object()) {
         synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "no object or object deleted");
         return false;
@@ -1938,7 +1982,7 @@ bool WebGLRenderingContext::validateWebGLObject(const char* functionName, WebGLO
 }
 
 void WebGLRenderingContext::drawArrays(GC3Denum mode, GC3Dint first, GC3Dsizei count, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
 
     if (isContextLost() || !validateDrawMode("drawArrays", mode))
@@ -1995,7 +2039,7 @@ void WebGLRenderingContext::drawArrays(GC3Denum mode, GC3Dint first, GC3Dsizei c
 }
 
 void WebGLRenderingContext::drawElements(GC3Denum mode, GC3Dsizei count, GC3Denum type, long long offset, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
 
     if (isContextLost() || !validateDrawMode("drawElements", mode))
@@ -2079,7 +2123,7 @@ void WebGLRenderingContext::drawElements(GC3Denum mode, GC3Dsizei count, GC3Denu
 }
 
 void WebGLRenderingContext::enable(GC3Denum cap)
-{
+{LOG();
     if (isContextLost() || !validateCapability("enable", cap))
         return;
     if (cap == GraphicsContext3D::STENCIL_TEST) {
@@ -2098,7 +2142,7 @@ void WebGLRenderingContext::enable(GC3Denum cap)
 }
 
 void WebGLRenderingContext::enableVertexAttribArray(GC3Duint index, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return;
@@ -2115,7 +2159,7 @@ void WebGLRenderingContext::enableVertexAttribArray(GC3Duint index, ExceptionCod
 }
 
 void WebGLRenderingContext::finish()
-{
+{LOG();
     if (isContextLost())
         return;
     m_context->finish();
@@ -2131,7 +2175,7 @@ void WebGLRenderingContext::flush()
 }
 
 void WebGLRenderingContext::framebufferRenderbuffer(GC3Denum target, GC3Denum attachment, GC3Denum renderbuffertarget, WebGLRenderbuffer* buffer, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateFramebufferFuncParameters("framebufferRenderbuffer", target, attachment))
         return;
@@ -2171,7 +2215,7 @@ void WebGLRenderingContext::framebufferRenderbuffer(GC3Denum target, GC3Denum at
 }
 
 void WebGLRenderingContext::framebufferTexture2D(GC3Denum target, GC3Denum attachment, GC3Denum textarget, WebGLTexture* texture, GC3Dint level, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateFramebufferFuncParameters("framebufferTexture2D", target, attachment))
         return;
@@ -2211,7 +2255,7 @@ void WebGLRenderingContext::framebufferTexture2D(GC3Denum target, GC3Denum attac
 }
 
 void WebGLRenderingContext::frontFace(GC3Denum mode)
-{
+{LOG();
     if (isContextLost())
         return;
     m_context->frontFace(mode);
@@ -2219,7 +2263,7 @@ void WebGLRenderingContext::frontFace(GC3Denum mode)
 }
 
 void WebGLRenderingContext::generateMipmap(GC3Denum target)
-{
+{LOG();
     if (isContextLost())
         return;
     WebGLTexture* tex = validateTextureBinding("generateMipmap", target, false);
@@ -2251,7 +2295,7 @@ void WebGLRenderingContext::generateMipmap(GC3Denum target)
 }
 
 PassRefPtr<WebGLActiveInfo> WebGLRenderingContext::getActiveAttrib(WebGLProgram* program, GC3Duint index, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("getActiveAttrib", program))
         return 0;
@@ -2262,7 +2306,7 @@ PassRefPtr<WebGLActiveInfo> WebGLRenderingContext::getActiveAttrib(WebGLProgram*
 }
 
 PassRefPtr<WebGLActiveInfo> WebGLRenderingContext::getActiveUniform(WebGLProgram* program, GC3Duint index, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("getActiveUniform", program))
         return 0;
@@ -2276,7 +2320,7 @@ PassRefPtr<WebGLActiveInfo> WebGLRenderingContext::getActiveUniform(WebGLProgram
 }
 
 bool WebGLRenderingContext::getAttachedShaders(WebGLProgram* program, Vector<RefPtr<WebGLShader> >& shaderObjects, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     shaderObjects.clear();
     if (isContextLost() || !validateWebGLObject("getAttachedShaders", program))
@@ -2295,7 +2339,7 @@ bool WebGLRenderingContext::getAttachedShaders(WebGLProgram* program, Vector<Ref
 }
 
 GC3Dint WebGLRenderingContext::getAttribLocation(WebGLProgram* program, const String& name)
-{
+{LOG();
     if (isContextLost() || !validateWebGLObject("getAttribLocation", program))
         return -1;
     if (!validateLocationLength("getAttribLocation", name))
@@ -2312,7 +2356,7 @@ GC3Dint WebGLRenderingContext::getAttribLocation(WebGLProgram* program, const St
 }
 
 WebGLGetInfo WebGLRenderingContext::getBufferParameter(GC3Denum target, GC3Denum pname, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return WebGLGetInfo();
@@ -2335,7 +2379,7 @@ WebGLGetInfo WebGLRenderingContext::getBufferParameter(GC3Denum target, GC3Denum
 }
 
 PassRefPtr<WebGLContextAttributes> WebGLRenderingContext::getContextAttributes()
-{
+{LOG();
     if (isContextLost())
         return 0;
     // We always need to return a new WebGLContextAttributes object to
@@ -2358,12 +2402,12 @@ PassRefPtr<WebGLContextAttributes> WebGLRenderingContext::getContextAttributes()
 }
 
 GC3Denum WebGLRenderingContext::getError()
-{
+{LOG();
     return m_context->getError();
 }
 
 WebGLExtension* WebGLRenderingContext::getExtension(const String& name)
-{
+{LOG();
     if (isContextLost())
         return 0;
 
@@ -2470,7 +2514,7 @@ WebGLExtension* WebGLRenderingContext::getExtension(const String& name)
 }
 
 WebGLGetInfo WebGLRenderingContext::getFramebufferAttachmentParameter(GC3Denum target, GC3Denum attachment, GC3Denum pname, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateFramebufferFuncParameters("getFramebufferAttachmentParameter", target, attachment))
         return WebGLGetInfo();
@@ -2523,7 +2567,7 @@ WebGLGetInfo WebGLRenderingContext::getFramebufferAttachmentParameter(GC3Denum t
 }
 
 WebGLGetInfo WebGLRenderingContext::getParameter(GC3Denum pname, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return WebGLGetInfo();
@@ -2762,7 +2806,7 @@ WebGLGetInfo WebGLRenderingContext::getParameter(GC3Denum pname, ExceptionCode&
 }
 
 WebGLGetInfo WebGLRenderingContext::getProgramParameter(WebGLProgram* program, GC3Denum pname, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("getProgramParameter", program))
         return WebGLGetInfo();
@@ -2789,7 +2833,7 @@ WebGLGetInfo WebGLRenderingContext::getProgramParameter(WebGLProgram* program, G
 }
 
 String WebGLRenderingContext::getProgramInfoLog(WebGLProgram* program, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return String();
@@ -2800,7 +2844,7 @@ String WebGLRenderingContext::getProgramInfoLog(WebGLProgram* program, Exception
 }
 
 WebGLGetInfo WebGLRenderingContext::getRenderbufferParameter(GC3Denum target, GC3Denum pname, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return WebGLGetInfo();
@@ -2867,7 +2911,7 @@ WebGLGetInfo WebGLRenderingContext::getRenderbufferParameter(GC3Denum target, GC
 }
 
 WebGLGetInfo WebGLRenderingContext::getShaderParameter(WebGLShader* shader, GC3Denum pname, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("getShaderParameter", shader))
         return WebGLGetInfo();
@@ -2889,7 +2933,7 @@ WebGLGetInfo WebGLRenderingContext::getShaderParameter(WebGLShader* shader, GC3D
 }
 
 String WebGLRenderingContext::getShaderInfoLog(WebGLShader* shader, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return String();
@@ -2900,7 +2944,7 @@ String WebGLRenderingContext::getShaderInfoLog(WebGLShader* shader, ExceptionCod
 }
 
 PassRefPtr<WebGLShaderPrecisionFormat> WebGLRenderingContext::getShaderPrecisionFormat(GC3Denum shaderType, GC3Denum precisionType, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return 0;
@@ -2932,7 +2976,7 @@ PassRefPtr<WebGLShaderPrecisionFormat> WebGLRenderingContext::getShaderPrecision
 }
 
 String WebGLRenderingContext::getShaderSource(WebGLShader* shader, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return String();
@@ -2942,7 +2986,7 @@ String WebGLRenderingContext::getShaderSource(WebGLShader* shader, ExceptionCode
 }
 
 Vector<String> WebGLRenderingContext::getSupportedExtensions()
-{
+{LOG();
     Vector<String> result;
     if (m_context->getExtensions()->supports("GL_OES_texture_float"))
         result.append("OES_texture_float");
@@ -2976,7 +3020,7 @@ Vector<String> WebGLRenderingContext::getSupportedExtensions()
 }
 
 WebGLGetInfo WebGLRenderingContext::getTexParameter(GC3Denum target, GC3Denum pname, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return WebGLGetInfo();
@@ -3006,7 +3050,7 @@ WebGLGetInfo WebGLRenderingContext::getTexParameter(GC3Denum target, GC3Denum pn
 }
 
 WebGLGetInfo WebGLRenderingContext::getUniform(WebGLProgram* program, const WebGLUniformLocation* uniformLocation, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("getUniform", program))
         return WebGLGetInfo();
@@ -3159,7 +3203,7 @@ WebGLGetInfo WebGLRenderingContext::getUniform(WebGLProgram* program, const WebG
 }
 
 PassRefPtr<WebGLUniformLocation> WebGLRenderingContext::getUniformLocation(WebGLProgram* program, const String& name, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("getUniformLocation", program))
         return 0;
@@ -3181,7 +3225,7 @@ PassRefPtr<WebGLUniformLocation> WebGLRenderingContext::getUniformLocation(WebGL
 }
 
 WebGLGetInfo WebGLRenderingContext::getVertexAttrib(GC3Duint index, GC3Denum pname, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return WebGLGetInfo();
@@ -3217,7 +3261,7 @@ WebGLGetInfo WebGLRenderingContext::getVertexAttrib(GC3Duint index, GC3Denum pna
 }
 
 long long WebGLRenderingContext::getVertexAttribOffset(GC3Duint index, GC3Denum pname)
-{
+{LOG();
     if (isContextLost())
         return 0;
     GC3Dsizeiptr result = m_context->getVertexAttribOffset(index, pname);
@@ -3225,8 +3269,38 @@ long long WebGLRenderingContext::getVertexAttribOffset(GC3Duint index, GC3Denum
     return static_cast<long long>(result);
 }
 
-void WebGLRenderingContext::hint(GC3Denum target, GC3Denum mode)
+void WebGLRenderingContext::sprawdz_bottleneck()
+{
+    double st = currentTime();
+    
+        int u = FuncCount- FuncCount2;
+        double prev = totalWGLRCTXtime;
+
+        for (int i =0 ; i< u; i++)
+        {
+            LOG();
+        }
+
+    double end = currentTime() - st;
+
+    printf("CZAS %d calli to okolo %lf albo to w co loger wierzy %lf\n", u, end, totalWGLRCTXtime - prev);
+}
+
+void WebGLRenderingContext::czysc_counter()
+{
+    totalWGLRCTXtime = prev_totalWGLRCTXtime = FuncCount = FuncCount2 = 0.0;
+    printf("wyczyszczone\n");
+}
+
+void WebGLRenderingContext::mojafunkcja()
 {
+    static int d = 0;
+    printf("mojafunkcja %d : %lf sekund diff %lf (calls, total %d, outside %d, inside %d   ) \n", ++d, totalWGLRCTXtime, (totalWGLRCTXtime - prev_totalWGLRCTXtime) *1000, FuncCount, FuncCount2,  FuncCount- FuncCount2);
+    prev_totalWGLRCTXtime  = totalWGLRCTXtime;
+}
+
+void WebGLRenderingContext::hint(GC3Denum target, GC3Denum mode)
+{LOG();
     if (isContextLost())
         return;
     bool isValid = false;
@@ -3248,7 +3322,7 @@ void WebGLRenderingContext::hint(GC3Denum target, GC3Denum mode)
 }
 
 GC3Dboolean WebGLRenderingContext::isBuffer(WebGLBuffer* buffer)
-{
+{LOG();
     if (!buffer || isContextLost())
         return 0;
 
@@ -3264,7 +3338,7 @@ bool WebGLRenderingContext::isContextLost()
 }
 
 GC3Dboolean WebGLRenderingContext::isEnabled(GC3Denum cap)
-{
+{LOG();
     if (isContextLost() || !validateCapability("isEnabled", cap))
         return 0;
     if (cap == GraphicsContext3D::STENCIL_TEST)
@@ -3273,7 +3347,7 @@ GC3Dboolean WebGLRenderingContext::isEnabled(GC3Denum cap)
 }
 
 GC3Dboolean WebGLRenderingContext::isFramebuffer(WebGLFramebuffer* framebuffer)
-{
+{LOG();
     if (!framebuffer || isContextLost())
         return 0;
 
@@ -3284,7 +3358,7 @@ GC3Dboolean WebGLRenderingContext::isFramebuffer(WebGLFramebuffer* framebuffer)
 }
 
 GC3Dboolean WebGLRenderingContext::isProgram(WebGLProgram* program)
-{
+{LOG();
     if (!program || isContextLost())
         return 0;
 
@@ -3292,7 +3366,7 @@ GC3Dboolean WebGLRenderingContext::isProgram(WebGLProgram* program)
 }
 
 GC3Dboolean WebGLRenderingContext::isRenderbuffer(WebGLRenderbuffer* renderbuffer)
-{
+{LOG();
     if (!renderbuffer || isContextLost())
         return 0;
 
@@ -3303,7 +3377,7 @@ GC3Dboolean WebGLRenderingContext::isRenderbuffer(WebGLRenderbuffer* renderbuffe
 }
 
 GC3Dboolean WebGLRenderingContext::isShader(WebGLShader* shader)
-{
+{LOG();
     if (!shader || isContextLost())
         return 0;
 
@@ -3311,7 +3385,7 @@ GC3Dboolean WebGLRenderingContext::isShader(WebGLShader* shader)
 }
 
 GC3Dboolean WebGLRenderingContext::isTexture(WebGLTexture* texture)
-{
+{LOG();
     if (!texture || isContextLost())
         return 0;
 
@@ -3322,7 +3396,7 @@ GC3Dboolean WebGLRenderingContext::isTexture(WebGLTexture* texture)
 }
 
 void WebGLRenderingContext::lineWidth(GC3Dfloat width)
-{
+{LOG();
     if (isContextLost())
         return;
     m_context->lineWidth(width);
@@ -3330,7 +3404,7 @@ void WebGLRenderingContext::lineWidth(GC3Dfloat width)
 }
 
 void WebGLRenderingContext::linkProgram(WebGLProgram* program, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("linkProgram", program))
         return;
@@ -3347,7 +3421,7 @@ void WebGLRenderingContext::linkProgram(WebGLProgram* program, ExceptionCode& ec
 }
 
 void WebGLRenderingContext::pixelStorei(GC3Denum pname, GC3Dint param)
-{
+{LOG();
     if (isContextLost())
         return;
     switch (pname) {
@@ -3386,7 +3460,7 @@ void WebGLRenderingContext::pixelStorei(GC3Denum pname, GC3Dint param)
 }
 
 void WebGLRenderingContext::polygonOffset(GC3Dfloat factor, GC3Dfloat units)
-{
+{LOG();
     if (isContextLost())
         return;
     m_context->polygonOffset(factor, units);
@@ -3394,7 +3468,7 @@ void WebGLRenderingContext::polygonOffset(GC3Dfloat factor, GC3Dfloat units)
 }
 
 void WebGLRenderingContext::readPixels(GC3Dint x, GC3Dint y, GC3Dsizei width, GC3Dsizei height, GC3Denum format, GC3Denum type, ArrayBufferView* pixels, ExceptionCode&)
-{
+{LOG();
     if (isContextLost())
         return;
     // Due to WebGL's same-origin restrictions, it is not possible to
@@ -3486,7 +3560,7 @@ void WebGLRenderingContext::readPixels(GC3Dint x, GC3Dint y, GC3Dsizei width, GC
 
 #if !defined(ENABLE_TIZEN_SUPPORT)
 void WebGLRenderingContext::releaseShaderCompiler()
-{
+{LOG();
     if (isContextLost())
         return;
     m_context->releaseShaderCompiler();
@@ -3495,7 +3569,7 @@ void WebGLRenderingContext::releaseShaderCompiler()
 #endif
 
 void WebGLRenderingContext::renderbufferStorage(GC3Denum target, GC3Denum internalformat, GC3Dsizei width, GC3Dsizei height)
-{
+{LOG();
     if (isContextLost())
         return;
     if (target != GraphicsContext3D::RENDERBUFFER) {
@@ -3537,7 +3611,7 @@ void WebGLRenderingContext::renderbufferStorage(GC3Denum target, GC3Denum intern
 }
 
 void WebGLRenderingContext::sampleCoverage(GC3Dfloat value, GC3Dboolean invert)
-{
+{LOG();
     if (isContextLost())
         return;
     m_context->sampleCoverage(value, invert);
@@ -3545,7 +3619,7 @@ void WebGLRenderingContext::sampleCoverage(GC3Dfloat value, GC3Dboolean invert)
 }
 
 void WebGLRenderingContext::scissor(GC3Dint x, GC3Dint y, GC3Dsizei width, GC3Dsizei height)
-{
+{LOG();
     if (isContextLost())
         return;
     if (!validateSize("scissor", width, height))
@@ -3555,7 +3629,7 @@ void WebGLRenderingContext::scissor(GC3Dint x, GC3Dint y, GC3Dsizei width, GC3Ds
 }
 
 void WebGLRenderingContext::shaderSource(WebGLShader* shader, const String& string, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("shaderSource", shader))
         return;
@@ -3568,7 +3642,7 @@ void WebGLRenderingContext::shaderSource(WebGLShader* shader, const String& stri
 }
 
 void WebGLRenderingContext::stencilFunc(GC3Denum func, GC3Dint ref, GC3Duint mask)
-{
+{LOG();
     if (isContextLost())
         return;
     if (!validateStencilFunc("stencilFunc", func))
@@ -3582,7 +3656,7 @@ void WebGLRenderingContext::stencilFunc(GC3Denum func, GC3Dint ref, GC3Duint mas
 }
 
 void WebGLRenderingContext::stencilFuncSeparate(GC3Denum face, GC3Denum func, GC3Dint ref, GC3Duint mask)
-{
+{LOG();
     if (isContextLost())
         return;
     if (!validateStencilFunc("stencilFuncSeparate", func))
@@ -3611,7 +3685,7 @@ void WebGLRenderingContext::stencilFuncSeparate(GC3Denum face, GC3Denum func, GC
 }
 
 void WebGLRenderingContext::stencilMask(GC3Duint mask)
-{
+{LOG();
     if (isContextLost())
         return;
     m_stencilMask = mask;
@@ -3621,7 +3695,7 @@ void WebGLRenderingContext::stencilMask(GC3Duint mask)
 }
 
 void WebGLRenderingContext::stencilMaskSeparate(GC3Denum face, GC3Duint mask)
-{
+{LOG();
     if (isContextLost())
         return;
     switch (face) {
@@ -3644,7 +3718,7 @@ void WebGLRenderingContext::stencilMaskSeparate(GC3Denum face, GC3Duint mask)
 }
 
 void WebGLRenderingContext::stencilOp(GC3Denum fail, GC3Denum zfail, GC3Denum zpass)
-{
+{LOG();
     if (isContextLost())
         return;
     m_context->stencilOp(fail, zfail, zpass);
@@ -3652,7 +3726,7 @@ void WebGLRenderingContext::stencilOp(GC3Denum fail, GC3Denum zfail, GC3Denum zp
 }
 
 void WebGLRenderingContext::stencilOpSeparate(GC3Denum face, GC3Denum fail, GC3Denum zfail, GC3Denum zpass)
-{
+{LOG();
     if (isContextLost())
         return;
     m_context->stencilOpSeparate(face, fail, zfail, zpass);
@@ -3660,7 +3734,7 @@ void WebGLRenderingContext::stencilOpSeparate(GC3Denum face, GC3Denum fail, GC3D
 }
 
 void WebGLRenderingContext::texImage2DBase(GC3Denum target, GC3Dint level, GC3Denum internalformat, GC3Dsizei width, GC3Dsizei height, GC3Dint border, GC3Denum format, GC3Denum type, const void* pixels, ExceptionCode& ec)
-{
+{LOG();
     // FIXME: For now we ignore any errors returned
     ec = 0;
     WebGLTexture* tex = validateTextureBinding("texImage2D", target, true);
@@ -3690,7 +3764,7 @@ void WebGLRenderingContext::texImage2DBase(GC3Denum target, GC3Dint level, GC3De
 }
 
 void WebGLRenderingContext::texImage2DImpl(GC3Denum target, GC3Dint level, GC3Denum internalformat, GC3Denum format, GC3Denum type, Image* image, GraphicsContext3D::ImageHtmlDomSource domSource, bool flipY, bool premultiplyAlpha, ExceptionCode& ec)
-{
+{LOG();
     ec = 0;
     Vector<uint8_t> data;
     GraphicsContext3D::ImageExtractor imageExtractor(image, domSource, premultiplyAlpha, m_unpackColorspaceConversion == GraphicsContext3D::NONE);
@@ -3720,7 +3794,7 @@ void WebGLRenderingContext::texImage2DImpl(GC3Denum target, GC3Dint level, GC3De
 }
 
 bool WebGLRenderingContext::validateTexFunc(const char* functionName, TexFuncValidationFunctionType functionType, TexFuncValidationSourceType sourceType, GC3Denum target, GC3Dint level, GC3Denum internalformat, GC3Dsizei width, GC3Dsizei height, GC3Dint border, GC3Denum format, GC3Denum type, GC3Dint xoffset, GC3Dint yoffset)
-{
+{LOG();
     // FIXME: Uploading {ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement} to half floating point texture is not supported yet.
     // See https://bugs.webkit.org/show_bug.cgi?id=110936.
     if (sourceType != SourceArrayBufferView && type == GraphicsContext3D::HALF_FLOAT_OES) {
@@ -3772,7 +3846,7 @@ bool WebGLRenderingContext::validateTexFunc(const char* functionName, TexFuncVal
 void WebGLRenderingContext::texImage2D(GC3Denum target, GC3Dint level, GC3Denum internalformat,
                                        GC3Dsizei width, GC3Dsizei height, GC3Dint border,
                                        GC3Denum format, GC3Denum type, ArrayBufferView* pixels, ExceptionCode& ec)
-{
+{LOG();
     if (isContextLost() || !validateTexFuncData("texImage2D", level, width, height, format, type, pixels, NullAllowed)
         || !validateTexFunc("texImage2D", NotTexSubImage2D, SourceArrayBufferView, target, level, internalformat, width, height, border, format, type, 0, 0))
         return;
@@ -3799,7 +3873,7 @@ void WebGLRenderingContext::texImage2D(GC3Denum target, GC3Dint level, GC3Denum
 
 void WebGLRenderingContext::texImage2D(GC3Denum target, GC3Dint level, GC3Denum internalformat,
                                        GC3Denum format, GC3Denum type, ImageData* pixels, ExceptionCode& ec)
-{
+{LOG();
     ec = 0;
     if (isContextLost() || !pixels || !validateTexFunc("texImage2D", NotTexSubImage2D, SourceImageData, target, level, internalformat, pixels->width(), pixels->height(), 0, format, type, 0, 0))
         return;
@@ -3824,7 +3898,7 @@ void WebGLRenderingContext::texImage2D(GC3Denum target, GC3Dint level, GC3Denum
 
 void WebGLRenderingContext::texImage2D(GC3Denum target, GC3Dint level, GC3Denum internalformat,
                                        GC3Denum format, GC3Denum type, HTMLImageElement* image, ExceptionCode& ec)
-{
+{LOG();
     ec = 0;
     if (isContextLost() || !validateHTMLImageElement("texImage2D", image, ec))
         return;
@@ -3837,7 +3911,7 @@ void WebGLRenderingContext::texImage2D(GC3Denum target, GC3Dint level, GC3Denum
 
 void WebGLRenderingContext::texImage2D(GC3Denum target, GC3Dint level, GC3Denum internalformat,
                                        GC3Denum format, GC3Denum type, HTMLCanvasElement* canvas, ExceptionCode& ec)
-{
+{LOG();
     ec = 0;
     if (isContextLost() || !validateHTMLCanvasElement("texImage2D", canvas, ec) || !validateTexFunc("texImage2D", NotTexSubImage2D, SourceHTMLCanvasElement, target, level, internalformat, canvas->width(), canvas->height(), 0, format, type, 0, 0))
         return;
@@ -3867,7 +3941,7 @@ void WebGLRenderingContext::texImage2D(GC3Denum target, GC3Dint level, GC3Denum
 
 #if ENABLE(VIDEO)
 PassRefPtr<Image> WebGLRenderingContext::videoFrameToImage(HTMLVideoElement* video, BackingStoreCopy backingStoreCopy, ExceptionCode&)
-{
+{LOG();
     IntSize size(video->videoWidth(), video->videoHeight());
     ImageBuffer* buf = m_videoCache.imageBuffer(size);
     if (!buf) {
@@ -3882,7 +3956,7 @@ PassRefPtr<Image> WebGLRenderingContext::videoFrameToImage(HTMLVideoElement* vid
 
 void WebGLRenderingContext::texImage2D(GC3Denum target, GC3Dint level, GC3Denum internalformat,
                                        GC3Denum format, GC3Denum type, HTMLVideoElement* video, ExceptionCode& ec)
-{
+{LOG();
     ec = 0;
     if (isContextLost() || !validateHTMLVideoElement("texImage2D", video, ec)
         || !validateTexFunc("texImage2D", NotTexSubImage2D, SourceHTMLVideoElement, target, level, internalformat, video->videoWidth(), video->videoHeight(), 0, format, type, 0, 0))
@@ -3914,7 +3988,7 @@ void WebGLRenderingContext::texImage2D(GC3Denum target, GC3Dint level, GC3Denum
 #endif
 
 void WebGLRenderingContext::texParameter(GC3Denum target, GC3Denum pname, GC3Dfloat paramf, GC3Dint parami, bool isFloat)
-{
+{LOG();
     if (isContextLost())
         return;
     WebGLTexture* tex = validateTextureBinding("texParameter", target, false);
@@ -3963,7 +4037,7 @@ void WebGLRenderingContext::texParameteri(GC3Denum target, GC3Denum pname, GC3Di
 }
 
 void WebGLRenderingContext::texSubImage2DBase(GC3Denum target, GC3Dint level, GC3Dint xoffset, GC3Dint yoffset, GC3Dsizei width, GC3Dsizei height, GC3Denum format, GC3Denum type, const void* pixels, ExceptionCode& ec)
-{
+{LOG();
     // FIXME: For now we ignore any errors returned
     ec = 0;
     ASSERT(!isContextLost());
@@ -3986,7 +4060,7 @@ void WebGLRenderingContext::texSubImage2DBase(GC3Denum target, GC3Dint level, GC
 }
 
 void WebGLRenderingContext::texSubImage2DImpl(GC3Denum target, GC3Dint level, GC3Dint xoffset, GC3Dint yoffset, GC3Denum format, GC3Denum type, Image* image, GraphicsContext3D::ImageHtmlDomSource domSource, bool flipY, bool premultiplyAlpha, ExceptionCode& ec)
-{
+{LOG();
     ec = 0;
     Vector<uint8_t> data;
     GraphicsContext3D::ImageExtractor imageExtractor(image, domSource, premultiplyAlpha, m_unpackColorspaceConversion == GraphicsContext3D::NONE);  
@@ -4018,7 +4092,7 @@ void WebGLRenderingContext::texSubImage2DImpl(GC3Denum target, GC3Dint level, GC
 void WebGLRenderingContext::texSubImage2D(GC3Denum target, GC3Dint level, GC3Dint xoffset, GC3Dint yoffset,
                                           GC3Dsizei width, GC3Dsizei height,
                                           GC3Denum format, GC3Denum type, ArrayBufferView* pixels, ExceptionCode& ec)
-{
+{LOG();
     if (isContextLost() || !validateTexFuncData("texSubImage2D", level, width, height, format, type, pixels, NullNotAllowed)
         || !validateTexFunc("texSubImage2D", TexSubImage2D, SourceArrayBufferView, target, level, format, width, height, 0, format, type, xoffset, yoffset))
         return;
@@ -4044,7 +4118,7 @@ void WebGLRenderingContext::texSubImage2D(GC3Denum target, GC3Dint level, GC3Din
 
 void WebGLRenderingContext::texSubImage2D(GC3Denum target, GC3Dint level, GC3Dint xoffset, GC3Dint yoffset,
                                           GC3Denum format, GC3Denum type, ImageData* pixels, ExceptionCode& ec)
-{
+{LOG();
     ec = 0;
     if (isContextLost() || !pixels || !validateTexFunc("texSubImage2D", TexSubImage2D, SourceImageData, target, level, format,  pixels->width(), pixels->height(), 0, format, type, xoffset, yoffset))
         return;
@@ -4070,7 +4144,7 @@ void WebGLRenderingContext::texSubImage2D(GC3Denum target, GC3Dint level, GC3Din
 
 void WebGLRenderingContext::texSubImage2D(GC3Denum target, GC3Dint level, GC3Dint xoffset, GC3Dint yoffset,
                                           GC3Denum format, GC3Denum type, HTMLImageElement* image, ExceptionCode& ec)
-{
+{LOG();
     ec = 0;
     if (isContextLost() || !validateHTMLImageElement("texSubImage2D", image, ec))
         return;
@@ -4083,7 +4157,7 @@ void WebGLRenderingContext::texSubImage2D(GC3Denum target, GC3Dint level, GC3Din
 
 void WebGLRenderingContext::texSubImage2D(GC3Denum target, GC3Dint level, GC3Dint xoffset, GC3Dint yoffset,
                                           GC3Denum format, GC3Denum type, HTMLCanvasElement* canvas, ExceptionCode& ec)
-{
+{LOG();
     ec = 0;
     if (isContextLost() || !validateHTMLCanvasElement("texSubImage2D", canvas, ec)
         || !validateTexFunc("texSubImage2D", TexSubImage2D, SourceHTMLCanvasElement, target, level, format, canvas->width(), canvas->height(), 0, format, type, xoffset, yoffset))
@@ -4099,7 +4173,7 @@ void WebGLRenderingContext::texSubImage2D(GC3Denum target, GC3Dint level, GC3Din
 #if ENABLE(VIDEO)
 void WebGLRenderingContext::texSubImage2D(GC3Denum target, GC3Dint level, GC3Dint xoffset, GC3Dint yoffset,
                                           GC3Denum format, GC3Denum type, HTMLVideoElement* video, ExceptionCode& ec)
-{
+{LOG();
     ec = 0;
     if (isContextLost() || !validateHTMLVideoElement("texSubImage2D", video, ec)
         || !validateTexFunc("texSubImage2D", TexSubImage2D, SourceHTMLVideoElement, target, level, format, video->videoWidth(), video->videoHeight(), 0, format, type, xoffset, yoffset))
@@ -4113,7 +4187,7 @@ void WebGLRenderingContext::texSubImage2D(GC3Denum target, GC3Dint level, GC3Din
 #endif
 
 void WebGLRenderingContext::uniform1f(const WebGLUniformLocation* location, GC3Dfloat x, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !location)
         return;
@@ -4128,7 +4202,7 @@ void WebGLRenderingContext::uniform1f(const WebGLUniformLocation* location, GC3D
 }
 
 void WebGLRenderingContext::uniform1fv(const WebGLUniformLocation* location, Float32Array* v, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform1fv", location, v, 1))
         return;
@@ -4138,7 +4212,7 @@ void WebGLRenderingContext::uniform1fv(const WebGLUniformLocation* location, Flo
 }
 
 void WebGLRenderingContext::uniform1fv(const WebGLUniformLocation* location, GC3Dfloat* v, GC3Dsizei size, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform1fv", location, v, size, 1))
         return;
@@ -4148,7 +4222,7 @@ void WebGLRenderingContext::uniform1fv(const WebGLUniformLocation* location, GC3
 }
 
 void WebGLRenderingContext::uniform1i(const WebGLUniformLocation* location, GC3Dint x, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !location)
         return;
@@ -4163,7 +4237,7 @@ void WebGLRenderingContext::uniform1i(const WebGLUniformLocation* location, GC3D
 }
 
 void WebGLRenderingContext::uniform1iv(const WebGLUniformLocation* location, Int32Array* v, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform1iv", location, v, 1))
         return;
@@ -4173,7 +4247,7 @@ void WebGLRenderingContext::uniform1iv(const WebGLUniformLocation* location, Int
 }
 
 void WebGLRenderingContext::uniform1iv(const WebGLUniformLocation* location, GC3Dint* v, GC3Dsizei size, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform1iv", location, v, size, 1))
         return;
@@ -4183,7 +4257,7 @@ void WebGLRenderingContext::uniform1iv(const WebGLUniformLocation* location, GC3
 }
 
 void WebGLRenderingContext::uniform2f(const WebGLUniformLocation* location, GC3Dfloat x, GC3Dfloat y, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !location)
         return;
@@ -4198,7 +4272,7 @@ void WebGLRenderingContext::uniform2f(const WebGLUniformLocation* location, GC3D
 }
 
 void WebGLRenderingContext::uniform2fv(const WebGLUniformLocation* location, Float32Array* v, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform2fv", location, v, 2))
         return;
@@ -4208,7 +4282,7 @@ void WebGLRenderingContext::uniform2fv(const WebGLUniformLocation* location, Flo
 }
 
 void WebGLRenderingContext::uniform2fv(const WebGLUniformLocation* location, GC3Dfloat* v, GC3Dsizei size, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform2fv", location, v, size, 2))
         return;
@@ -4218,7 +4292,7 @@ void WebGLRenderingContext::uniform2fv(const WebGLUniformLocation* location, GC3
 }
 
 void WebGLRenderingContext::uniform2i(const WebGLUniformLocation* location, GC3Dint x, GC3Dint y, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !location)
         return;
@@ -4233,7 +4307,7 @@ void WebGLRenderingContext::uniform2i(const WebGLUniformLocation* location, GC3D
 }
 
 void WebGLRenderingContext::uniform2iv(const WebGLUniformLocation* location, Int32Array* v, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform2iv", location, v, 2))
         return;
@@ -4243,7 +4317,7 @@ void WebGLRenderingContext::uniform2iv(const WebGLUniformLocation* location, Int
 }
 
 void WebGLRenderingContext::uniform2iv(const WebGLUniformLocation* location, GC3Dint* v, GC3Dsizei size, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform2iv", location, v, size, 2))
         return;
@@ -4253,7 +4327,7 @@ void WebGLRenderingContext::uniform2iv(const WebGLUniformLocation* location, GC3
 }
 
 void WebGLRenderingContext::uniform3f(const WebGLUniformLocation* location, GC3Dfloat x, GC3Dfloat y, GC3Dfloat z, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !location)
         return;
@@ -4268,7 +4342,7 @@ void WebGLRenderingContext::uniform3f(const WebGLUniformLocation* location, GC3D
 }
 
 void WebGLRenderingContext::uniform3fv(const WebGLUniformLocation* location, Float32Array* v, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform3fv", location, v, 3))
         return;
@@ -4278,7 +4352,7 @@ void WebGLRenderingContext::uniform3fv(const WebGLUniformLocation* location, Flo
 }
 
 void WebGLRenderingContext::uniform3fv(const WebGLUniformLocation* location, GC3Dfloat* v, GC3Dsizei size, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform3fv", location, v, size, 3))
         return;
@@ -4288,7 +4362,7 @@ void WebGLRenderingContext::uniform3fv(const WebGLUniformLocation* location, GC3
 }
 
 void WebGLRenderingContext::uniform3i(const WebGLUniformLocation* location, GC3Dint x, GC3Dint y, GC3Dint z, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !location)
         return;
@@ -4303,7 +4377,7 @@ void WebGLRenderingContext::uniform3i(const WebGLUniformLocation* location, GC3D
 }
 
 void WebGLRenderingContext::uniform3iv(const WebGLUniformLocation* location, Int32Array* v, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform3iv", location, v, 3))
         return;
@@ -4313,7 +4387,7 @@ void WebGLRenderingContext::uniform3iv(const WebGLUniformLocation* location, Int
 }
 
 void WebGLRenderingContext::uniform3iv(const WebGLUniformLocation* location, GC3Dint* v, GC3Dsizei size, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform3iv", location, v, size, 3))
         return;
@@ -4323,7 +4397,7 @@ void WebGLRenderingContext::uniform3iv(const WebGLUniformLocation* location, GC3
 }
 
 void WebGLRenderingContext::uniform4f(const WebGLUniformLocation* location, GC3Dfloat x, GC3Dfloat y, GC3Dfloat z, GC3Dfloat w, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !location)
         return;
@@ -4338,7 +4412,7 @@ void WebGLRenderingContext::uniform4f(const WebGLUniformLocation* location, GC3D
 }
 
 void WebGLRenderingContext::uniform4fv(const WebGLUniformLocation* location, Float32Array* v, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform4fv", location, v, 4))
         return;
@@ -4348,7 +4422,7 @@ void WebGLRenderingContext::uniform4fv(const WebGLUniformLocation* location, Flo
 }
 
 void WebGLRenderingContext::uniform4fv(const WebGLUniformLocation* location, GC3Dfloat* v, GC3Dsizei size, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform4fv", location, v, size, 4))
         return;
@@ -4358,7 +4432,7 @@ void WebGLRenderingContext::uniform4fv(const WebGLUniformLocation* location, GC3
 }
 
 void WebGLRenderingContext::uniform4i(const WebGLUniformLocation* location, GC3Dint x, GC3Dint y, GC3Dint z, GC3Dint w, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !location)
         return;
@@ -4373,7 +4447,7 @@ void WebGLRenderingContext::uniform4i(const WebGLUniformLocation* location, GC3D
 }
 
 void WebGLRenderingContext::uniform4iv(const WebGLUniformLocation* location, Int32Array* v, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform4iv", location, v, 4))
         return;
@@ -4383,7 +4457,7 @@ void WebGLRenderingContext::uniform4iv(const WebGLUniformLocation* location, Int
 }
 
 void WebGLRenderingContext::uniform4iv(const WebGLUniformLocation* location, GC3Dint* v, GC3Dsizei size, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformParameters("uniform4iv", location, v, size, 4))
         return;
@@ -4393,7 +4467,7 @@ void WebGLRenderingContext::uniform4iv(const WebGLUniformLocation* location, GC3
 }
 
 void WebGLRenderingContext::uniformMatrix2fv(const WebGLUniformLocation* location, GC3Dboolean transpose, Float32Array* v, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformMatrixParameters("uniformMatrix2fv", location, transpose, v, 4))
         return;
@@ -4402,7 +4476,7 @@ void WebGLRenderingContext::uniformMatrix2fv(const WebGLUniformLocation* locatio
 }
 
 void WebGLRenderingContext::uniformMatrix2fv(const WebGLUniformLocation* location, GC3Dboolean transpose, GC3Dfloat* v, GC3Dsizei size, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformMatrixParameters("uniformMatrix2fv", location, transpose, v, size, 4))
         return;
@@ -4411,7 +4485,7 @@ void WebGLRenderingContext::uniformMatrix2fv(const WebGLUniformLocation* locatio
 }
 
 void WebGLRenderingContext::uniformMatrix3fv(const WebGLUniformLocation* location, GC3Dboolean transpose, Float32Array* v, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformMatrixParameters("uniformMatrix3fv", location, transpose, v, 9))
         return;
@@ -4420,7 +4494,7 @@ void WebGLRenderingContext::uniformMatrix3fv(const WebGLUniformLocation* locatio
 }
 
 void WebGLRenderingContext::uniformMatrix3fv(const WebGLUniformLocation* location, GC3Dboolean transpose, GC3Dfloat* v, GC3Dsizei size, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformMatrixParameters("uniformMatrix3fv", location, transpose, v, size, 9))
         return;
@@ -4429,7 +4503,7 @@ void WebGLRenderingContext::uniformMatrix3fv(const WebGLUniformLocation* locatio
 }
 
 void WebGLRenderingContext::uniformMatrix4fv(const WebGLUniformLocation* location, GC3Dboolean transpose, Float32Array* v, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformMatrixParameters("uniformMatrix4fv", location, transpose, v, 16))
         return;
@@ -4438,7 +4512,7 @@ void WebGLRenderingContext::uniformMatrix4fv(const WebGLUniformLocation* locatio
 }
 
 void WebGLRenderingContext::uniformMatrix4fv(const WebGLUniformLocation* location, GC3Dboolean transpose, GC3Dfloat* v, GC3Dsizei size, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateUniformMatrixParameters("uniformMatrix4fv", location, transpose, v, size, 16))
         return;
@@ -4447,7 +4521,7 @@ void WebGLRenderingContext::uniformMatrix4fv(const WebGLUniformLocation* locatio
 }
 
 void WebGLRenderingContext::useProgram(WebGLProgram* program, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     bool deleted;
     if (!checkObjectToBeBound("useProgram", program, deleted))
@@ -4471,7 +4545,7 @@ void WebGLRenderingContext::useProgram(WebGLProgram* program, ExceptionCode& ec)
 }
 
 void WebGLRenderingContext::validateProgram(WebGLProgram* program, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost() || !validateWebGLObject("validateProgram", program))
         return;
@@ -4540,7 +4614,7 @@ void WebGLRenderingContext::vertexAttrib4fv(GC3Duint index, GC3Dfloat* v, GC3Dsi
 }
 
 void WebGLRenderingContext::vertexAttribPointer(GC3Duint index, GC3Dint size, GC3Denum type, GC3Dboolean normalized, GC3Dsizei stride, long long offset, ExceptionCode& ec)
-{
+{LOG();
     UNUSED_PARAM(ec);
     if (isContextLost())
         return;
@@ -4585,7 +4659,7 @@ void WebGLRenderingContext::vertexAttribPointer(GC3Duint index, GC3Dint size, GC
 }
 
 void WebGLRenderingContext::viewport(GC3Dint x, GC3Dint y, GC3Dsizei width, GC3Dsizei height)
-{
+{LOG();
     if (isContextLost())
         return;
     if (!validateSize("viewport", width, height))
@@ -4595,7 +4669,7 @@ void WebGLRenderingContext::viewport(GC3Dint x, GC3Dint y, GC3Dsizei width, GC3D
 }
 
 void WebGLRenderingContext::forceLostContext(WebGLRenderingContext::LostContextMode mode)
-{
+{LOG();
     if (isContextLost()) {
         synthesizeGLError(GraphicsContext3D::INVALID_OPERATION, "loseContext", "context already lost");
         return;
@@ -4605,7 +4679,7 @@ void WebGLRenderingContext::forceLostContext(WebGLRenderingContext::LostContextM
 }
 
 void WebGLRenderingContext::loseContextImpl(WebGLRenderingContext::LostContextMode mode)
-{
+{LOG();
     if (isContextLost())
         return;
 
@@ -4650,7 +4724,7 @@ void WebGLRenderingContext::loseContextImpl(WebGLRenderingContext::LostContextMo
 }
 
 void WebGLRenderingContext::forceRestoreContext()
-{
+{LOG();
     if (!isContextLost()) {
         synthesizeGLError(GraphicsContext3D::INVALID_OPERATION, "restoreContext", "context not lost");
         return;
@@ -4696,7 +4770,7 @@ void WebGLRenderingContext::addContextObject(WebGLContextObject* object)
 }
 
 void WebGLRenderingContext::detachAndRemoveAllObjects()
-{
+{LOG();
     while (m_contextObjects.size() > 0) {
         HashSet<WebGLContextObject*>::iterator it = m_contextObjects.begin();
         (*it)->detachContext();
@@ -4709,7 +4783,7 @@ bool WebGLRenderingContext::hasPendingActivity() const
 }
 
 void WebGLRenderingContext::stop()
-{
+{LOG();
     if (!isContextLost()) {
         forceLostContext(SyntheticLostContext);
         destroyGraphicsContext3D();
@@ -4717,14 +4791,14 @@ void WebGLRenderingContext::stop()
 }
 
 WebGLGetInfo WebGLRenderingContext::getBooleanParameter(GC3Denum pname)
-{
+{LOG();
     GC3Dboolean value = 0;
     m_context->getBooleanv(pname, &value);
     return WebGLGetInfo(static_cast<bool>(value));
 }
 
 WebGLGetInfo WebGLRenderingContext::getBooleanArrayParameter(GC3Denum pname)
-{
+{LOG();
     if (pname != GraphicsContext3D::COLOR_WRITEMASK) {
         notImplemented();
         return WebGLGetInfo(0, 0);
@@ -4738,28 +4812,28 @@ WebGLGetInfo WebGLRenderingContext::getBooleanArrayParameter(GC3Denum pname)
 }
 
 WebGLGetInfo WebGLRenderingContext::getFloatParameter(GC3Denum pname)
-{
+{LOG();
     GC3Dfloat value = 0;
     m_context->getFloatv(pname, &value);
     return WebGLGetInfo(value);
 }
 
 WebGLGetInfo WebGLRenderingContext::getIntParameter(GC3Denum pname)
-{
+{LOG();
     GC3Dint value = 0;
     m_context->getIntegerv(pname, &value);
     return WebGLGetInfo(value);
 }
 
 WebGLGetInfo WebGLRenderingContext::getUnsignedIntParameter(GC3Denum pname)
-{
+{LOG();
     GC3Dint value = 0;
     m_context->getIntegerv(pname, &value);
     return WebGLGetInfo(static_cast<unsigned int>(value));
 }
 
 WebGLGetInfo WebGLRenderingContext::getWebGLFloatArrayParameter(GC3Denum pname)
-{
+{LOG();
     GC3Dfloat value[4] = {0};
     m_context->getFloatv(pname, value);
     unsigned length = 0;
@@ -4780,7 +4854,7 @@ WebGLGetInfo WebGLRenderingContext::getWebGLFloatArrayParameter(GC3Denum pname)
 }
 
 WebGLGetInfo WebGLRenderingContext::getWebGLIntArrayParameter(GC3Denum pname)
-{
+{LOG();
     GC3Dint value[4] = {0};
     m_context->getIntegerv(pname, value);
     unsigned length = 0;
@@ -4799,7 +4873,7 @@ WebGLGetInfo WebGLRenderingContext::getWebGLIntArrayParameter(GC3Denum pname)
 }
 
 void WebGLRenderingContext::handleNPOTTextures(const char* functionName, bool prepareToDraw)
-{
+{LOG();
     bool resetActiveUnit = false;
     for (unsigned ii = 0; ii < m_textureUnits.size(); ++ii) {
         if ((m_textureUnits[ii].m_texture2DBinding && m_textureUnits[ii].m_texture2DBinding->needToUseBlackTexture())
@@ -4834,7 +4908,7 @@ void WebGLRenderingContext::handleNPOTTextures(const char* functionName, bool pr
 }
 
 void WebGLRenderingContext::createFallbackBlackTextures1x1()
-{
+{LOG();
     unsigned char black[] = {0, 0, 0, 255};
     m_blackTexture2D = createTexture();
     m_context->bindTexture(GraphicsContext3D::TEXTURE_2D, m_blackTexture2D->object());
@@ -4860,14 +4934,14 @@ void WebGLRenderingContext::createFallbackBlackTextures1x1()
 
 bool WebGLRenderingContext::isTexInternalFormatColorBufferCombinationValid(GC3Denum texInternalFormat,
                                                                            GC3Denum colorBufferFormat)
-{
+{LOG();
     unsigned need = GraphicsContext3D::getChannelBitsByFormat(texInternalFormat);
     unsigned have = GraphicsContext3D::getChannelBitsByFormat(colorBufferFormat);
     return (need & have) == need;
 }
 
 GC3Denum WebGLRenderingContext::getBoundFramebufferColorFormat()
-{
+{LOG();
     if (m_framebufferBinding && m_framebufferBinding->object())
         return m_framebufferBinding->getColorBufferFormat();
     if (m_attributes.alpha)
@@ -4876,21 +4950,21 @@ GC3Denum WebGLRenderingContext::getBoundFramebufferColorFormat()
 }
 
 int WebGLRenderingContext::getBoundFramebufferWidth()
-{
+{LOG();
     if (m_framebufferBinding && m_framebufferBinding->object())
         return m_framebufferBinding->getColorBufferWidth();
     return m_drawingBuffer ? m_drawingBuffer->size().width() : m_context->getInternalFramebufferSize().width();
 }
 
 int WebGLRenderingContext::getBoundFramebufferHeight()
-{
+{LOG();
     if (m_framebufferBinding && m_framebufferBinding->object())
         return m_framebufferBinding->getColorBufferHeight();
     return m_drawingBuffer ? m_drawingBuffer->size().height() : m_context->getInternalFramebufferSize().height();
 }
 
 WebGLTexture* WebGLRenderingContext::validateTextureBinding(const char* functionName, GC3Denum target, bool useSixEnumsForCubeMap)
-{
+{LOG();
     WebGLTexture* tex = 0;
     switch (target) {
     case GraphicsContext3D::TEXTURE_2D:
@@ -4925,7 +4999,7 @@ WebGLTexture* WebGLRenderingContext::validateTextureBinding(const char* function
 }
 
 bool WebGLRenderingContext::validateLocationLength(const char* functionName, const String& string)
-{
+{LOG();
     const unsigned maxWebGLLocationLength = 256;
     if (string.length() > maxWebGLLocationLength) {
         synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "location length > 256");
@@ -4935,7 +5009,7 @@ bool WebGLRenderingContext::validateLocationLength(const char* functionName, con
 }
 
 bool WebGLRenderingContext::validateSize(const char* functionName, GC3Dint x, GC3Dint y)
-{
+{LOG();
     if (x < 0 || y < 0) {
         synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "size < 0");
         return false;
@@ -4944,7 +5018,7 @@ bool WebGLRenderingContext::validateSize(const char* functionName, GC3Dint x, GC
 }
 
 bool WebGLRenderingContext::validateString(const char* functionName, const String& string)
-{
+{LOG();
     for (size_t i = 0; i < string.length(); ++i) {
         if (!validateCharacter(string[i])) {
             synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "string not ASCII");
@@ -4955,7 +5029,7 @@ bool WebGLRenderingContext::validateString(const char* functionName, const Strin
 }
 
 bool WebGLRenderingContext::validateTexFuncFormatAndType(const char* functionName, GC3Denum format, GC3Denum type, GC3Dint level)
-{
+{LOG();
     switch (format) {
     case GraphicsContext3D::ALPHA:
     case GraphicsContext3D::LUMINANCE:
@@ -5070,7 +5144,7 @@ bool WebGLRenderingContext::validateTexFuncFormatAndType(const char* functionNam
 }
 
 bool WebGLRenderingContext::validateTexFuncLevel(const char* functionName, GC3Denum target, GC3Dint level)
-{
+{LOG();
     if (level < 0) {
         synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "level < 0");
         return false;
@@ -5105,7 +5179,7 @@ bool WebGLRenderingContext::validateTexFuncParameters(const char* functionName,
                                                       GC3Denum internalformat,
                                                       GC3Dsizei width, GC3Dsizei height, GC3Dint border,
                                                       GC3Denum format, GC3Denum type)
-{
+{LOG();
     // We absolutely have to validate the format and type combination.
     // The texImage2D entry points taking HTMLImage, etc. will produce
     // temporary data based on this combination, so it must be legal.
@@ -5165,7 +5239,7 @@ bool WebGLRenderingContext::validateTexFuncData(const char* functionName, GC3Din
                                                 GC3Denum format, GC3Denum type,
                                                 ArrayBufferView* pixels,
                                                 NullDisposition disposition)
-{
+{LOG();
     if (!pixels) {
         if (disposition == NullAllowed)
             return true;
@@ -5239,7 +5313,7 @@ bool WebGLRenderingContext::validateCompressedTexFormat(GC3Denum format)
 bool WebGLRenderingContext::validateCompressedTexFuncData(const char* functionName,
                                                           GC3Dsizei width, GC3Dsizei height,
                                                           GC3Denum format, ArrayBufferView* pixels)
-{
+{LOG();
     if (!pixels) {
         synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "no pixels");
         return false;
@@ -5312,7 +5386,7 @@ bool WebGLRenderingContext::validateCompressedTexFuncData(const char* functionNa
 }
 
 bool WebGLRenderingContext::validateCompressedTexDimensions(const char* functionName, GC3Dint level, GC3Dsizei width, GC3Dsizei height, GC3Denum format)
-{
+{LOG();
     switch (format) {
     case Extensions3D::COMPRESSED_RGB_S3TC_DXT1_EXT:
     case Extensions3D::COMPRESSED_RGBA_S3TC_DXT1_EXT:
@@ -5335,7 +5409,7 @@ bool WebGLRenderingContext::validateCompressedTexDimensions(const char* function
 
 bool WebGLRenderingContext::validateCompressedTexSubDimensions(const char* functionName, GC3Denum target, GC3Dint level, GC3Dint xoffset, GC3Dint yoffset,
                                                                GC3Dsizei width, GC3Dsizei height, GC3Denum format, WebGLTexture* tex)
-{
+{LOG();
     if (xoffset < 0 || yoffset < 0) {
       synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "xoffset or yoffset < 0");
       return false;
@@ -5365,7 +5439,7 @@ bool WebGLRenderingContext::validateCompressedTexSubDimensions(const char* funct
 }
 
 bool WebGLRenderingContext::validateDrawMode(const char* functionName, GC3Denum mode)
-{
+{LOG();
     switch (mode) {
     case GraphicsContext3D::POINTS:
     case GraphicsContext3D::LINE_STRIP:
@@ -5382,7 +5456,7 @@ bool WebGLRenderingContext::validateDrawMode(const char* functionName, GC3Denum
 }
 
 bool WebGLRenderingContext::validateStencilSettings(const char* functionName)
-{
+{LOG();
     if (m_stencilMask != m_stencilMaskBack || m_stencilFuncRef != m_stencilFuncRefBack || m_stencilFuncMask != m_stencilFuncMaskBack) {
         synthesizeGLError(GraphicsContext3D::INVALID_OPERATION, functionName, "front and back stencils settings do not match");
         return false;
@@ -5391,7 +5465,7 @@ bool WebGLRenderingContext::validateStencilSettings(const char* functionName)
 }
 
 bool WebGLRenderingContext::validateStencilFunc(const char* functionName, GC3Denum func)
-{
+{LOG();
     switch (func) {
     case GraphicsContext3D::NEVER:
     case GraphicsContext3D::LESS:
@@ -5409,7 +5483,7 @@ bool WebGLRenderingContext::validateStencilFunc(const char* functionName, GC3Den
 }
 
 void WebGLRenderingContext::printGLErrorToConsole(const String& message)
-{
+{LOG();
     if (!m_numGLErrorsToConsoleAllowed)
         return;
 
@@ -5421,7 +5495,7 @@ void WebGLRenderingContext::printGLErrorToConsole(const String& message)
 }
 
 void WebGLRenderingContext::printWarningToConsole(const String& message)
-{
+{LOG();
     if (!canvas())
         return;
     Document* document = canvas()->document();
@@ -5431,7 +5505,7 @@ void WebGLRenderingContext::printWarningToConsole(const String& message)
 }
 
 bool WebGLRenderingContext::validateFramebufferFuncParameters(const char* functionName, GC3Denum target, GC3Denum attachment)
-{
+{LOG();
     if (target != GraphicsContext3D::FRAMEBUFFER) {
         synthesizeGLError(GraphicsContext3D::INVALID_ENUM, functionName, "invalid target");
         return false;
@@ -5454,7 +5528,7 @@ bool WebGLRenderingContext::validateFramebufferFuncParameters(const char* functi
 }
 
 bool WebGLRenderingContext::validateBlendEquation(const char* functionName, GC3Denum mode)
-{
+{LOG();
     switch (mode) {
     case GraphicsContext3D::FUNC_ADD:
     case GraphicsContext3D::FUNC_SUBTRACT:
@@ -5467,7 +5541,7 @@ bool WebGLRenderingContext::validateBlendEquation(const char* functionName, GC3D
 }
 
 bool WebGLRenderingContext::validateBlendFuncFactors(const char* functionName, GC3Denum src, GC3Denum dst)
-{
+{LOG();
     if (((src == GraphicsContext3D::CONSTANT_COLOR || src == GraphicsContext3D::ONE_MINUS_CONSTANT_COLOR)
          && (dst == GraphicsContext3D::CONSTANT_ALPHA || dst == GraphicsContext3D::ONE_MINUS_CONSTANT_ALPHA))
         || ((dst == GraphicsContext3D::CONSTANT_COLOR || dst == GraphicsContext3D::ONE_MINUS_CONSTANT_COLOR)
@@ -5479,7 +5553,7 @@ bool WebGLRenderingContext::validateBlendFuncFactors(const char* functionName, G
 }
 
 bool WebGLRenderingContext::validateCapability(const char* functionName, GC3Denum cap)
-{
+{LOG();
     switch (cap) {
     case GraphicsContext3D::BLEND:
     case GraphicsContext3D::CULL_FACE:
@@ -5498,7 +5572,7 @@ bool WebGLRenderingContext::validateCapability(const char* functionName, GC3Denu
 }
 
 bool WebGLRenderingContext::validateUniformParameters(const char* functionName, const WebGLUniformLocation* location, Float32Array* v, GC3Dsizei requiredMinSize)
-{
+{LOG();
     if (!v) {
         synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "no array");
         return false;
@@ -5507,7 +5581,7 @@ bool WebGLRenderingContext::validateUniformParameters(const char* functionName,
 }
 
 bool WebGLRenderingContext::validateUniformParameters(const char* functionName, const WebGLUniformLocation* location, Int32Array* v, GC3Dsizei requiredMinSize)
-{
+{LOG();
     if (!v) {
         synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "no array");
         return false;
@@ -5521,7 +5595,7 @@ bool WebGLRenderingContext::validateUniformParameters(const char* functionName,
 }
 
 bool WebGLRenderingContext::validateUniformMatrixParameters(const char* functionName, const WebGLUniformLocation* location, GC3Dboolean transpose, Float32Array* v, GC3Dsizei requiredMinSize)
-{
+{LOG();
     if (!v) {
         synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "no array");
         return false;
@@ -5530,7 +5604,7 @@ bool WebGLRenderingContext::validateUniformMatrixParameters(const char* function
 }
 
 bool WebGLRenderingContext::validateUniformMatrixParameters(const char* functionName, const WebGLUniformLocation* location, GC3Dboolean transpose, void* v, GC3Dsizei size, GC3Dsizei requiredMinSize)
-{
+{LOG();
     if (!location)
         return false;
     if (location->program() != m_currentProgram) {
@@ -5553,7 +5627,7 @@ bool WebGLRenderingContext::validateUniformMatrixParameters(const char* function
 }
 
 WebGLBuffer* WebGLRenderingContext::validateBufferDataParameters(const char* functionName, GC3Denum target, GC3Denum usage)
-{
+{LOG();
     WebGLBuffer* buffer = 0;
     switch (target) {
     case GraphicsContext3D::ELEMENT_ARRAY_BUFFER:
@@ -5581,7 +5655,7 @@ WebGLBuffer* WebGLRenderingContext::validateBufferDataParameters(const char* fun
 }
 
 bool WebGLRenderingContext::validateHTMLImageElement(const char* functionName, HTMLImageElement* image, ExceptionCode& ec)
-{
+{LOG();
     if (!image || !image->cachedImage()) {
         synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "no image");
         return false;
@@ -5599,7 +5673,7 @@ bool WebGLRenderingContext::validateHTMLImageElement(const char* functionName, H
 }
 
 bool WebGLRenderingContext::validateHTMLCanvasElement(const char* functionName, HTMLCanvasElement* canvas, ExceptionCode& ec)
-{
+{LOG();
     if (!canvas || !canvas->buffer()) {
         synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "no canvas");
         return false;
@@ -5613,7 +5687,7 @@ bool WebGLRenderingContext::validateHTMLCanvasElement(const char* functionName,
 
 #if ENABLE(VIDEO)
 bool WebGLRenderingContext::validateHTMLVideoElement(const char* functionName, HTMLVideoElement* video, ExceptionCode& ec)
-{
+{LOG();
     if (!video || !video->videoWidth() || !video->videoHeight()) {
         synthesizeGLError(GraphicsContext3D::INVALID_VALUE, functionName, "no video");
         return false;
@@ -5627,7 +5701,7 @@ bool WebGLRenderingContext::validateHTMLVideoElement(const char* functionName, H
 #endif
 
 void WebGLRenderingContext::vertexAttribfImpl(const char* functionName, GC3Duint index, GC3Dsizei expectedSize, GC3Dfloat v0, GC3Dfloat v1, GC3Dfloat v2, GC3Dfloat v3)
-{
+{LOG();
     if (isContextLost())
         return;
     if (index >= m_maxVertexAttribs) {
@@ -5660,7 +5734,7 @@ void WebGLRenderingContext::vertexAttribfImpl(const char* functionName, GC3Duint
 }
 
 void WebGLRenderingContext::vertexAttribfvImpl(const char* functionName, GC3Duint index, Float32Array* v, GC3Dsizei expectedSize)
-{
+{LOG();
     if (isContextLost())
         return;
     if (!v) {
@@ -5671,7 +5745,7 @@ void WebGLRenderingContext::vertexAttribfvImpl(const char* functionName, GC3Duin
 }
 
 void WebGLRenderingContext::vertexAttribfvImpl(const char* functionName, GC3Duint index, GC3Dfloat* v, GC3Dsizei size, GC3Dsizei expectedSize)
-{
+{LOG();
     if (isContextLost())
         return;
     if (!v) {
@@ -5711,7 +5785,7 @@ void WebGLRenderingContext::vertexAttribfvImpl(const char* functionName, GC3Duin
 }
 
 void WebGLRenderingContext::initVertexAttrib0()
-{
+{LOG();
     WebGLVertexArrayObjectOES::VertexAttribState& state = m_boundVertexArrayObject->getVertexAttribState(0);
     
     m_vertexAttrib0Buffer = createBuffer();
@@ -5731,7 +5805,7 @@ void WebGLRenderingContext::initVertexAttrib0()
 }
 
 bool WebGLRenderingContext::simulateVertexAttrib0(GC3Dsizei numVertex)
-{
+{LOG();
     const WebGLVertexArrayObjectOES::VertexAttribState& state = m_boundVertexArrayObject->getVertexAttribState(0);
     const VertexAttribValue& attribValue = m_vertexAttribValue[0];
     if (!m_currentProgram)
@@ -5776,7 +5850,7 @@ bool WebGLRenderingContext::simulateVertexAttrib0(GC3Dsizei numVertex)
 }
 
 void WebGLRenderingContext::restoreStatesAfterVertexAttrib0Simulation()
-{
+{LOG();
     const WebGLVertexArrayObjectOES::VertexAttribState& state = m_boundVertexArrayObject->getVertexAttribState(0);
     if (state.bufferBinding != m_vertexAttrib0Buffer) {
         m_context->bindBuffer(GraphicsContext3D::ARRAY_BUFFER, objectOrZero(state.bufferBinding.get()));
@@ -5786,7 +5860,7 @@ void WebGLRenderingContext::restoreStatesAfterVertexAttrib0Simulation()
 }
 
 void WebGLRenderingContext::dispatchContextLostEvent(Timer<WebGLRenderingContext>*)
-{
+{LOG();
     RefPtr<WebGLContextEvent> event = WebGLContextEvent::create(eventNames().webglcontextlostEvent, false, true, "");
     canvas()->dispatchEvent(event);
     m_restoreAllowed = event->defaultPrevented();
@@ -5795,7 +5869,7 @@ void WebGLRenderingContext::dispatchContextLostEvent(Timer<WebGLRenderingContext
 }
 
 void WebGLRenderingContext::maybeRestoreContext(Timer<WebGLRenderingContext>*)
-{
+{LOG();
     ASSERT(m_contextLost);
     if (!m_contextLost)
         return;
@@ -5883,7 +5957,7 @@ void WebGLRenderingContext::maybeRestoreContext(Timer<WebGLRenderingContext>*)
 }
 
 String WebGLRenderingContext::ensureNotNull(const String& text) const
-{
+{LOG();
     if (text.isNull())
         return WTF::emptyString();
     return text;
@@ -5892,11 +5966,11 @@ String WebGLRenderingContext::ensureNotNull(const String& text) const
 WebGLRenderingContext::LRUImageBufferCache::LRUImageBufferCache(int capacity)
     : m_buffers(adoptArrayPtr(new OwnPtr<ImageBuffer>[capacity]))
     , m_capacity(capacity)
-{
+{LOG();
 }
 
 ImageBuffer* WebGLRenderingContext::LRUImageBufferCache::imageBuffer(const IntSize& size)
-{
+{LOG();
     int i;
     for (i = 0; i < m_capacity; ++i) {
         ImageBuffer* buf = m_buffers[i].get();
@@ -5920,7 +5994,7 @@ ImageBuffer* WebGLRenderingContext::LRUImageBufferCache::imageBuffer(const IntSi
 }
 
 void WebGLRenderingContext::LRUImageBufferCache::bubbleToFront(int idx)
-{
+{LOG();
     for (int i = idx; i > 0; --i)
         m_buffers[i].swap(m_buffers[i-1]);
 }
@@ -5950,7 +6024,7 @@ namespace {
 } // namespace anonymous
 
 void WebGLRenderingContext::synthesizeGLError(GC3Denum error, const char* functionName, const char* description, ConsoleDisplayPreference display)
-{
+{LOG();
     if (m_synthesizedErrorsToConsole && display == DisplayInConsole) {
       String str = String("WebGL: ") + GetErrorString(error) +  ": " + String(functionName) + ": " + String(description);
       printGLErrorToConsole(str);
@@ -5960,7 +6034,7 @@ void WebGLRenderingContext::synthesizeGLError(GC3Denum error, const char* functi
 
 
 void WebGLRenderingContext::printGLWarningToConsole(const char* functionName, const char* description)
-{
+{LOG();
     if (m_synthesizedErrorsToConsole) {
         String str = String("WebGL: ") + String(functionName) + ": " + String(description);
         printGLErrorToConsole(str);
@@ -5968,7 +6042,7 @@ void WebGLRenderingContext::printGLWarningToConsole(const char* functionName, co
 }
 
 void WebGLRenderingContext::applyStencilTest()
-{
+{LOG();
     bool haveStencilBuffer = false;
 
     if (m_framebufferBinding)
@@ -5982,7 +6056,7 @@ void WebGLRenderingContext::applyStencilTest()
 }
 
 void WebGLRenderingContext::enableOrDisable(GC3Denum capability, bool enable)
-{
+{LOG();
     if (enable)
         m_context->enable(capability);
     else
@@ -5990,13 +6064,13 @@ void WebGLRenderingContext::enableOrDisable(GC3Denum capability, bool enable)
 }
 
 IntSize WebGLRenderingContext::clampedCanvasSize()
-{
+{LOG();
     return IntSize(clamp(canvas()->width(), 1, m_maxViewportDims[0]),
                    clamp(canvas()->height(), 1, m_maxViewportDims[1]));
 }
 
 GC3Dint WebGLRenderingContext::getMaxDrawBuffers()
-{
+{LOG();
     if (!supportsDrawBuffers())
         return 0;
     if (!m_maxDrawBuffers)
@@ -6008,7 +6082,7 @@ GC3Dint WebGLRenderingContext::getMaxDrawBuffers()
 }
 
 GC3Dint WebGLRenderingContext::getMaxColorAttachments()
-{
+{LOG();
     if (!supportsDrawBuffers())
         return 0;
     if (!m_maxColorAttachments)
@@ -6034,7 +6108,7 @@ void WebGLRenderingContext::restoreCurrentTexture2D()
 }
 
 bool WebGLRenderingContext::supportsDrawBuffers()
-{
+{LOG();
     if (!m_drawBuffersWebGLRequirementsChecked) {
         m_drawBuffersWebGLRequirementsChecked = true;
         m_drawBuffersSupported = EXTDrawBuffers::supported(this);
diff --git a/Source/WebCore/html/canvas/WebGLRenderingContext.h b/Source/WebCore/html/canvas/WebGLRenderingContext.h
index 6bc6f2b..ab6c98a 100644
--- a/Source/WebCore/html/canvas/WebGLRenderingContext.h
+++ b/Source/WebCore/html/canvas/WebGLRenderingContext.h
@@ -183,6 +183,10 @@ public:
     WebGLGetInfo getVertexAttrib(GC3Duint index, GC3Denum pname, ExceptionCode&);
     long long getVertexAttribOffset(GC3Duint index, GC3Denum pname);
 
+    void sprawdz_bottleneck();
+    void czysc_counter();
+    void mojafunkcja();
+
     void hint(GC3Denum target, GC3Denum mode);
     GC3Dboolean isBuffer(WebGLBuffer*);
     bool isContextLost();
diff --git a/Source/WebCore/html/canvas/WebGLRenderingContext.idl b/Source/WebCore/html/canvas/WebGLRenderingContext.idl
index 6fa87f5..df2af32 100644
--- a/Source/WebCore/html/canvas/WebGLRenderingContext.idl
+++ b/Source/WebCore/html/canvas/WebGLRenderingContext.idl
@@ -572,6 +572,10 @@ typedef /*unrestricted*/ float GLclampf;
 
     [StrictTypeChecking] GLsizeiptr getVertexAttribOffset(GLuint index, GLenum pname);
 
+    [StrictTypeChecking] void         sprawdz_bottleneck();
+    [StrictTypeChecking] void         czysc_counter();
+    [StrictTypeChecking] void         mojafunkcja();
+
     [StrictTypeChecking] void         hint(GLenum target, GLenum mode);
     [StrictTypeChecking] GLboolean    isBuffer(WebGLBuffer buffer);
     [StrictTypeChecking] GLboolean    isContextLost();
